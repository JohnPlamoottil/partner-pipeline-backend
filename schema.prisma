// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model User {

  id                       String        @id @default(uuid())
  name                     String        @default("")
  email                    String        @unique @default("")
  password                 String
  role                     String?       @default("Student")
  isAdmin                  Boolean       @default(true)
  createdAt                DateTime?     @default(now())
  isActive                 Boolean       @default(false)
  lastLoginDate            DateTime?     @default(now())
  projects                 Project?      @relation("User_projects", fields: [projectsId], references: [id])
  projectsId               String?       @map("projects")
  from_UserLog_user        UserLog[]     @relation("UserLog_user")
  from_Milestone_updatedBy Milestone[]   @relation("Milestone_updatedBy")
  from_ActivityLog_user    ActivityLog[] @relation("ActivityLog_user")


  @@index([projectsId])
}

model UserLog {
  id        String    @id @default(uuid())
  user      User?     @relation("UserLog_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())

  @@index([userId])
}

model Project {
  id                      String       @id @default(uuid())
  name                    String       @default("")
  createdAt               DateTime?    @default(now())
  project                 String       @default("")
  isActive                Boolean      @default(false)
  lastUpdate              DateTime?    @default(now())
  members                 User[]       @relation("User_projects")
  milestones              Milestone[]  @relation("Milestone_project")
  from_ProjectLog_project ProjectLog[] @relation("ProjectLog_project")
}

model ProjectLog {
  id        String    @id @default(uuid())
  project   Project?  @relation("ProjectLog_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())

  @@index([projectId])
}

model Milestone {
  id            String     @id @default(uuid())
  project       Project?   @relation("Milestone_project", fields: [projectId], references: [id])
  projectId     String?    @map("project")
  milestoneName String     @default("")
  status        String     @default("not_started")
  assignee      String     @default("")
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @default(now()) @updatedAt
  updatedBy     User?      @relation("Milestone_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?    @map("updatedBy")
  from_ActivityLog_milestone ActivityLog[] @relation("ActivityLog_milestone")

  @@index([projectId])
  @@index([status])
  @@index([updatedById])
}


model ActivityLog {
  id          String     @id @default(uuid())
  milestone   Milestone? @relation("ActivityLog_milestone", fields: [milestoneId], references: [id])
  milestoneId String?    @map("milestone")
  oldStatus   String?
  newStatus   String?
  user        User?      @relation("ActivityLog_user", fields: [userId], references: [id])
  userId      String?    @map("user")
  timestamp   DateTime?  @default(now())

  @@index([milestoneId])
  @@index([userId])
}

