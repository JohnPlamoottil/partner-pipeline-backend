# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type ActivityLog {
  id: ID!
  oldStatus: String
  newStatus: String
  timestamp: DateTime
  projectId: String
  milestoneId: String
  updatedBy: User
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ActivityLogWhereUniqueInput {
  id: ID
}

input ActivityLogWhereInput {
  AND: [ActivityLogWhereInput!]
  OR: [ActivityLogWhereInput!]
  NOT: [ActivityLogWhereInput!]
  id: IDFilter
  oldStatus: StringFilter
  newStatus: StringFilter
  timestamp: DateTimeNullableFilter
  projectId: StringFilter
  milestoneId: StringFilter
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ActivityLogOrderByInput {
  id: OrderDirection
  oldStatus: OrderDirection
  newStatus: OrderDirection
  timestamp: OrderDirection
  projectId: OrderDirection
  milestoneId: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActivityLogUpdateInput {
  oldStatus: String
  newStatus: String
  timestamp: DateTime
  projectId: String
  milestoneId: String
  updatedBy: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ActivityLogUpdateArgs {
  where: ActivityLogWhereUniqueInput!
  data: ActivityLogUpdateInput!
}

input ActivityLogCreateInput {
  oldStatus: String
  newStatus: String
  timestamp: DateTime
  projectId: String
  milestoneId: String
  updatedBy: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isAdmin: Boolean
  createdAt: DateTime
  isActive: Boolean
  lastLoginDate: DateTime
  activityLogs(where: ActivityLogWhereInput! = {}, orderBy: [ActivityLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityLogWhereUniqueInput): [ActivityLog!]
  activityLogsCount(where: ActivityLogWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringNullableFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
  isActive: BooleanFilter
  lastLoginDate: DateTimeNullableFilter
  activityLogs: ActivityLogManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ActivityLogManyRelationFilter {
  every: ActivityLogWhereInput
  some: ActivityLogWhereInput
  none: ActivityLogWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  isActive: OrderDirection
  lastLoginDate: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isAdmin: Boolean
  createdAt: DateTime
  isActive: Boolean
  lastLoginDate: DateTime
  activityLogs: ActivityLogRelateToManyForUpdateInput
}

input ActivityLogRelateToManyForUpdateInput {
  disconnect: [ActivityLogWhereUniqueInput!]
  set: [ActivityLogWhereUniqueInput!]
  create: [ActivityLogCreateInput!]
  connect: [ActivityLogWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isAdmin: Boolean
  createdAt: DateTime
  isActive: Boolean
  lastLoginDate: DateTime
  activityLogs: ActivityLogRelateToManyForCreateInput
}

input ActivityLogRelateToManyForCreateInput {
  create: [ActivityLogCreateInput!]
  connect: [ActivityLogWhereUniqueInput!]
}

type UserLog {
  id: ID!
  user: User
  operation: String
  before: JSON
  after: JSON
  timestamp: DateTime
}

input UserLogWhereUniqueInput {
  id: ID
}

input UserLogWhereInput {
  AND: [UserLogWhereInput!]
  OR: [UserLogWhereInput!]
  NOT: [UserLogWhereInput!]
  id: IDFilter
  user: UserWhereInput
  operation: StringFilter
  timestamp: DateTimeNullableFilter
}

input UserLogOrderByInput {
  id: OrderDirection
  operation: OrderDirection
  timestamp: OrderDirection
}

input UserLogUpdateInput {
  user: UserRelateToOneForUpdateInput
  operation: String
  before: JSON
  after: JSON
  timestamp: DateTime
}

input UserLogUpdateArgs {
  where: UserLogWhereUniqueInput!
  data: UserLogUpdateInput!
}

input UserLogCreateInput {
  user: UserRelateToOneForCreateInput
  operation: String
  before: JSON
  after: JSON
  timestamp: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createActivityLog(data: ActivityLogCreateInput!): ActivityLog
  createActivityLogs(data: [ActivityLogCreateInput!]!): [ActivityLog]
  updateActivityLog(where: ActivityLogWhereUniqueInput!, data: ActivityLogUpdateInput!): ActivityLog
  updateActivityLogs(data: [ActivityLogUpdateArgs!]!): [ActivityLog]
  deleteActivityLog(where: ActivityLogWhereUniqueInput!): ActivityLog
  deleteActivityLogs(where: [ActivityLogWhereUniqueInput!]!): [ActivityLog]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserLog(data: UserLogCreateInput!): UserLog
  createUserLogs(data: [UserLogCreateInput!]!): [UserLog]
  updateUserLog(where: UserLogWhereUniqueInput!, data: UserLogUpdateInput!): UserLog
  updateUserLogs(data: [UserLogUpdateArgs!]!): [UserLog]
  deleteUserLog(where: UserLogWhereUniqueInput!): UserLog
  deleteUserLogs(where: [UserLogWhereUniqueInput!]!): [UserLog]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  activityLogs(where: ActivityLogWhereInput! = {}, orderBy: [ActivityLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ActivityLogWhereUniqueInput): [ActivityLog!]
  activityLog(where: ActivityLogWhereUniqueInput!): ActivityLog
  activityLogsCount(where: ActivityLogWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userLogs(where: UserLogWhereInput! = {}, orderBy: [UserLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserLogWhereUniqueInput): [UserLog!]
  userLog(where: UserLogWhereUniqueInput!): UserLog
  userLogsCount(where: UserLogWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
